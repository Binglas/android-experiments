import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion BUILD.android.compileSdkVersion

    buildToolsVersion BUILD.android.buildToolsVersion

    compileOptions {
        sourceCompatibility BUILD.compile.sourceCompatibility
        targetCompatibility BUILD.compile.targetCompatibility
    }

    defaultConfig {
        applicationId "com.tryus.snaporguess"

        minSdkVersion BUILD.android.minSdkVersion
        targetSdkVersion BUILD.android.targetSdkVersion

        versionName BUILD.product.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix "-${getGitHeadHash()}"

            minifyEnabled false
            shrinkResources false

        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { v ->
        def isReleaseBuildType = v.buildType.name == 'release'

        def versionName = v.versionName

        v.mergedFlavor.versionCode = buildFlavorVersionCode(versionName, isReleaseBuildType)
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile("com.android.support.test.espresso:espresso-core:" +
            "${BUILD.library.espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //Android Google libraries
    compile "com.android.support:appcompat-v7:${BUILD.library.supportVersion}"
    compile "com.android.support:design:${BUILD.library.supportVersion}"
    compile "com.android.support:support-vector-drawable:${BUILD.library.supportVersion}"

    // Misc libraries
    compile "com.jakewharton.timber:timber:${BUILD.library.timberVersion}"

    testCompile "junit:junit:${BUILD.library.junitVersion}"
}

def getGitHeadHash(shortSize = 8, referenceName = 'HEAD') {
    return executeShell("git rev-parse --short=${shortSize} ${referenceName}")
}

def executeShell(command) {
    def process = command.execute([], project.rootDir)

    process.waitFor()

    if (process.exitValue() != 0) {
        throw new RuntimeException(process.getErrorStream().text)
    }

    return process.text.trim()
}

def buildFlavorVersionCode(versionName, isRelease = false) {
    if (isRelease) {
        def (major, minor, patch) = versionName.tokenize('.')*.toInteger()
        return (major * 10000) + (minor * 100) + patch
    } else {
        def projectDate = new SimpleDateFormat('yyyyMMdd').parse(APK.projectStartDate)
        return Math.round((new Date().getTime() - projectDate.getTime()) / 1000)
    }
}
